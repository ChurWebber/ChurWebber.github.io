<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 编程笔记</title>
    <link>https://oquamnib.github.io/post/</link>
    <description>Recent content in Posts on 编程笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Jan 2019 15:03:11 +0000</lastBuildDate>
    
	<atom:link href="https://oquamnib.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MYSQL索引基础知识</title>
      <link>https://oquamnib.github.io/post/mysql-index-basics/</link>
      <pubDate>Tue, 08 Jan 2019 15:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/mysql-index-basics/</guid>
      <description>一. MySQL索引类型： 1. 普通索引 这是最基本的索引类型，而且它没有唯一性之类的限制。普通索引可以通过以下几种方式创建：
 创建索引，例如 CREATE INDEX &amp;lt;索引的名字&amp;gt; ON tablename (列的列表); 修改表，例如 ALTER TABLE tablename ADD INDEX [索引的名字] (列的列表); 创建表的时候指定索引，例如 CREATE TABLE tablename ( [...], INDEX [索引的名字] (列的列表) );  2. 唯一性索引 这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。唯一性索引可以用以下几种方式创建：
 创建索引，例如 CREATE UNIQUE INDEX &amp;lt;索引的名字&amp;gt; ON tablename (列的列表); 修改表，例如 ALTER TABLE tablename ADD UNIQUE [索引的名字] (列的列表); 创建表的时候指定索引，例如 CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (列的列表) );  3. 主键 主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。如果你曾经用过AUTO_INCREMENT类型的列，你可能已经熟悉主键之类的概念了。 主键一般在创建表的时候指定，例如“CREATE TABLE tablename ( [&amp;hellip;], PRIMARY KEY (列的列表) ); ”。 但是，我们也可以通过修改表的方式加入主键，例如“ALTER TABLE tablename ADD PRIMARY KEY (列的列表); ”。每个表只能有一个主键。</description>
    </item>
    
    <item>
      <title>工厂方法模式-Factory Methond Pattern</title>
      <link>https://oquamnib.github.io/post/factory-method-pattern/</link>
      <pubDate>Mon, 27 Aug 2018 16:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/factory-method-pattern/</guid>
      <description>&lt;p&gt;简单工厂模式虽然简单，但存在一个很严重的问题。&lt;strong&gt;当系统中需要引入新产品时，由于静态工厂方法通过所传入参数的不同来创建不同的产品，这必定要修改工厂类的源代码，将违背“开闭原则”，如何实现增加新产品而不影响已有代码？&lt;/strong&gt;工厂方法模式应运而生，本文将介绍第二种工厂模式——工厂方法模式。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单工厂模式-Simple Factory Pattern</title>
      <link>https://oquamnib.github.io/post/simple-factory-pattern/</link>
      <pubDate>Sun, 26 Aug 2018 16:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/simple-factory-pattern/</guid>
      <description>&lt;p&gt;工厂模式是最常用的一类创建型设计模式，通常我们所说的工厂模式是指&lt;strong&gt;工厂方法模式&lt;/strong&gt;，它也是使用频率最高的工厂模式。本章将要学习的&lt;strong&gt;简单工厂模式&lt;/strong&gt;是工厂方法模式的“小弟”，它不属于GoF 23种设计模式，但在软件开发中应用也较为频繁，通常将它作为学习其他工厂模式的入门。此外，工厂方法模式还有一位“大哥”——&lt;strong&gt;抽象工厂模式&lt;/strong&gt;。这三种工厂模式各具特色，难度也逐个加大，在软件开发中它们都得到了广泛的应用，成为面向对象软件中常用的创建对象的工具。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PSR规范 PSR-2 编码风格规范</title>
      <link>https://oquamnib.github.io/post/psr-2/</link>
      <pubDate>Mon, 30 Jul 2018 15:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/psr-2/</guid>
      <description>&lt;h1 id=&#34;编码风格指南&#34;&gt;编码风格指南&lt;/h1&gt;

&lt;p&gt;本篇规范是 [PSR-1][] 基本代码规范的继承与扩展。&lt;/p&gt;

&lt;p&gt;本规范希望通过制定一系列规范化PHP代码的规则，以减少在浏览不同作者的代码时，因代码风格的不同而造成不便。&lt;/p&gt;

&lt;p&gt;当多名程序员在多个项目中合作时，就需要一个共同的编码规范，&lt;/p&gt;

&lt;p&gt;而本文中的风格规范源自于多个不同项目代码风格的共同特性，&lt;/p&gt;

&lt;p&gt;因此，本规范的价值在于我们都遵循这个编码风格，而不是在于它本身。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PSR规范 PSR-1 基础编码规范</title>
      <link>https://oquamnib.github.io/post/psr-1/</link>
      <pubDate>Mon, 23 Jul 2018 15:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/psr-1/</guid>
      <description>&lt;h1 id=&#34;基本代码规范&#34;&gt;基本代码规范&lt;/h1&gt;

&lt;p&gt;本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高性能数据库设计原则</title>
      <link>https://oquamnib.github.io/post/high-performance-database-design-principles/</link>
      <pubDate>Thu, 19 Jul 2018 15:03:11 +0000</pubDate>
      
      <guid>https://oquamnib.github.io/post/high-performance-database-design-principles/</guid>
      <description>&lt;h1 id=&#34;一-高性能数据库设计原则&#34;&gt;一. 高性能数据库设计原则&lt;/h1&gt;

&lt;h2 id=&#34;1-数据库逻辑设计的规范化&#34;&gt;1. 数据库逻辑设计的规范化&lt;/h2&gt;

&lt;p&gt;数据库逻辑设计的规范化就是我们一般所说的范式&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一范式：没有重复的组或多值的列，这是数据库设计的最低要求&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二范式：每个关键字段必须依赖于主关键字，不能依赖于一个组合式主关键字的某些组成部分。消除部分依赖，大部分情况下，数据库设计都应达到第二范式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三范式：一个非关键字段不能依赖于另一个非关键字段。消除传递依赖，达到第三范式应是系统中大部分表的要求，除非一些特殊作用的表&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>